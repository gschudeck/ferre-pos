# Docker Compose para Ferre-POS Servidor Central
# Configuración completa con notación húngara en comentarios

version: '3.8'

# Redes con notación húngara
networks:
  net_ferre_pos:
    driver: bridge
    name: ferre-pos-network

# Volúmenes con notación húngara
volumes:
  vol_postgres_data:
    name: ferre-pos-postgres-data
  vol_redis_data:
    name: ferre-pos-redis-data
  vol_prometheus_data:
    name: ferre-pos-prometheus-data
  vol_grafana_data:
    name: ferre-pos-grafana-data
  vol_logs:
    name: ferre-pos-logs

services:
  # Base de datos PostgreSQL con notación húngara
  db_postgres:
    image: postgres:15-alpine
    container_name: ferre-pos-postgres
    restart: unless-stopped
    environment:
      # Variables de entorno con notación húngara
      POSTGRES_DB: ferre_pos
      POSTGRES_USER: ferrepos_user
      POSTGRES_PASSWORD: ferrepos_password_secure_2024
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - vol_postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - net_ferre_pos
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ferrepos_user -d ferre_pos"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Cache Redis con notación húngara
  cache_redis:
    image: redis:7-alpine
    container_name: ferre-pos-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password_secure_2024
    volumes:
      - vol_redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - net_ferre_pos
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API POS con notación húngara
  api_pos:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        STR_VERSION: ${VERSION:-dev}
        STR_BUILD_TIME: ${BUILD_TIME}
        STR_GIT_COMMIT: ${GIT_COMMIT}
    container_name: ferre-pos-api-pos
    restart: unless-stopped
    environment:
      # Variables de entorno con notación húngara
      STR_ENV: production
      STR_LOG_LEVEL: info
      STR_CONFIG_PATH: /app/configs
      STR_DB_HOST: db_postgres
      STR_DB_PORT: 5432
      STR_DB_NAME: ferre_pos
      STR_DB_USER: ferrepos_user
      STR_DB_PASSWORD: ferrepos_password_secure_2024
      STR_REDIS_HOST: cache_redis
      STR_REDIS_PORT: 6379
      STR_REDIS_PASSWORD: redis_password_secure_2024
      INT_PORT: 8080
      STR_SERVICE_NAME: api_pos
    ports:
      - "8080:8080"
    volumes:
      - vol_logs:/app/logs
      - ./configs:/app/configs:ro
    networks:
      - net_ferre_pos
    depends_on:
      db_postgres:
        condition: service_healthy
      cache_redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: ["./bin/api_pos"]

  # API Sync con notación húngara
  api_sync:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        STR_VERSION: ${VERSION:-dev}
        STR_BUILD_TIME: ${BUILD_TIME}
        STR_GIT_COMMIT: ${GIT_COMMIT}
    container_name: ferre-pos-api-sync
    restart: unless-stopped
    environment:
      # Variables de entorno con notación húngara
      STR_ENV: production
      STR_LOG_LEVEL: info
      STR_CONFIG_PATH: /app/configs
      STR_DB_HOST: db_postgres
      STR_DB_PORT: 5432
      STR_DB_NAME: ferre_pos
      STR_DB_USER: ferrepos_user
      STR_DB_PASSWORD: ferrepos_password_secure_2024
      STR_REDIS_HOST: cache_redis
      STR_REDIS_PORT: 6379
      STR_REDIS_PASSWORD: redis_password_secure_2024
      INT_PORT: 8081
      STR_SERVICE_NAME: api_sync
    ports:
      - "8081:8081"
    volumes:
      - vol_logs:/app/logs
      - ./configs:/app/configs:ro
    networks:
      - net_ferre_pos
    depends_on:
      db_postgres:
        condition: service_healthy
      cache_redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: ["./bin/api_sync"]

  # API Labels con notación húngara
  api_labels:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        STR_VERSION: ${VERSION:-dev}
        STR_BUILD_TIME: ${BUILD_TIME}
        STR_GIT_COMMIT: ${GIT_COMMIT}
    container_name: ferre-pos-api-labels
    restart: unless-stopped
    environment:
      # Variables de entorno con notación húngara
      STR_ENV: production
      STR_LOG_LEVEL: info
      STR_CONFIG_PATH: /app/configs
      STR_DB_HOST: db_postgres
      STR_DB_PORT: 5432
      STR_DB_NAME: ferre_pos
      STR_DB_USER: ferrepos_user
      STR_DB_PASSWORD: ferrepos_password_secure_2024
      STR_REDIS_HOST: cache_redis
      STR_REDIS_PORT: 6379
      STR_REDIS_PASSWORD: redis_password_secure_2024
      INT_PORT: 8082
      STR_SERVICE_NAME: api_labels
    ports:
      - "8082:8082"
    volumes:
      - vol_logs:/app/logs
      - ./configs:/app/configs:ro
    networks:
      - net_ferre_pos
    depends_on:
      db_postgres:
        condition: service_healthy
      cache_redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: ["./bin/api_labels"]

  # API Reports con notación húngara
  api_reports:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        STR_VERSION: ${VERSION:-dev}
        STR_BUILD_TIME: ${BUILD_TIME}
        STR_GIT_COMMIT: ${GIT_COMMIT}
    container_name: ferre-pos-api-reports
    restart: unless-stopped
    environment:
      # Variables de entorno con notación húngara
      STR_ENV: production
      STR_LOG_LEVEL: info
      STR_CONFIG_PATH: /app/configs
      STR_DB_HOST: db_postgres
      STR_DB_PORT: 5432
      STR_DB_NAME: ferre_pos
      STR_DB_USER: ferrepos_user
      STR_DB_PASSWORD: ferrepos_password_secure_2024
      STR_REDIS_HOST: cache_redis
      STR_REDIS_PORT: 6379
      STR_REDIS_PASSWORD: redis_password_secure_2024
      INT_PORT: 8083
      STR_SERVICE_NAME: api_reports
    ports:
      - "8083:8083"
    volumes:
      - vol_logs:/app/logs
      - ./configs:/app/configs:ro
    networks:
      - net_ferre_pos
    depends_on:
      db_postgres:
        condition: service_healthy
      cache_redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: ["./bin/api_reports"]

  # Prometheus para métricas con notación húngara
  monitoring_prometheus:
    image: prom/prometheus:latest
    container_name: ferre-pos-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - vol_prometheus_data:/prometheus
    networks:
      - net_ferre_pos
    depends_on:
      - api_pos
      - api_sync
      - api_labels
      - api_reports

  # Grafana para dashboards con notación húngara
  monitoring_grafana:
    image: grafana/grafana:latest
    container_name: ferre-pos-grafana
    restart: unless-stopped
    environment:
      # Variables de entorno con notación húngara
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: grafana_admin_password_2024
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - vol_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - net_ferre_pos
    depends_on:
      - monitoring_prometheus

  # Nginx como reverse proxy con notación húngara
  proxy_nginx:
    image: nginx:alpine
    container_name: ferre-pos-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - vol_logs:/var/log/nginx
    networks:
      - net_ferre_pos
    depends_on:
      - api_pos
      - api_sync
      - api_labels
      - api_reports
      - monitoring_grafana

  # Servicio de desarrollo con notación húngara
  dev_environment:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ferre-pos-dev
    restart: "no"
    environment:
      # Variables de entorno con notación húngara
      STR_ENV: development
      STR_LOG_LEVEL: debug
      STR_CONFIG_PATH: /app/configs
      STR_DB_HOST: db_postgres
      STR_DB_PORT: 5432
      STR_DB_NAME: ferre_pos
      STR_DB_USER: ferrepos_user
      STR_DB_PASSWORD: ferrepos_password_secure_2024
    volumes:
      - .:/app
      - vol_logs:/app/logs
    networks:
      - net_ferre_pos
    depends_on:
      db_postgres:
        condition: service_healthy
    profiles:
      - development
    command: ["tail", "-f", "/dev/null"]

  # Servicio multi-API con notación húngara
  multiservice:
    build:
      context: .
      dockerfile: Dockerfile
      target: multiservice
      args:
        STR_VERSION: ${VERSION:-dev}
        STR_BUILD_TIME: ${BUILD_TIME}
        STR_GIT_COMMIT: ${GIT_COMMIT}
    container_name: ferre-pos-multiservice
    restart: unless-stopped
    environment:
      # Variables de entorno con notación húngara
      STR_ENV: production
      STR_LOG_LEVEL: info
      STR_CONFIG_PATH: /app/configs
      STR_DB_HOST: db_postgres
      STR_DB_PORT: 5432
      STR_DB_NAME: ferre_pos
      STR_DB_USER: ferrepos_user
      STR_DB_PASSWORD: ferrepos_password_secure_2024
      STR_REDIS_HOST: cache_redis
      STR_REDIS_PORT: 6379
      STR_REDIS_PASSWORD: redis_password_secure_2024
    ports:
      - "8080:8080"
      - "8081:8081"
      - "8082:8082"
      - "8083:8083"
    volumes:
      - vol_logs:/app/logs
      - ./configs:/app/configs:ro
    networks:
      - net_ferre_pos
    depends_on:
      db_postgres:
        condition: service_healthy
      cache_redis:
        condition: service_healthy
    profiles:
      - multiservice
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:8080/health && curl -f http://localhost:8081/health && curl -f http://localhost:8082/health && curl -f http://localhost:8083/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 45s

